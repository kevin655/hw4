第一问

t1=imread('test1.pgm'); 
t2=imread('test2.tif');

g1=fspecial('gaussian',[3,3],1.5); 
g2=fspecial('gaussian',[5,5],1.5); 
g3=fspecial('gaussian',[7,7],1.5);

figure(1) 
subplot(2,2,1) 
imshow(t1); 
title('原图') 
subplot(2,2,2) 
imshow(imfilter(t1,g1)); 
title('3*3高斯滤波器') 
subplot(2,2,3) 
imshow(imfilter(t1,g2)); 
title('5*5高斯滤波器') 
subplot(2,2,4) 
imshow(imfilter(t1,g3)); 
title('7*7高斯滤波器')

figure(2) 
subplot(2,2,1) 
imshow(t1); 
title('原图') 
subplot(2,2,2) 
imshow(medfilt2(t1,[3,3])); 
title('3*3中值滤波器') 
subplot(2,2,3) 
imshow(medfilt2(t1,[5,5])); 
title('5*5中值滤波器') 
subplot(2,2,4) 
imshow(medfilt2(t1,[7,7])); 
title('7*7中值滤波器')

figure(3) 
subplot(2,2,1) 
imshow(t2); 
title('原图') 
subplot(2,2,2) 
imshow(imfilter(t2,g1)); 
title('3*3高斯滤波器') 
subplot(2,2,3) 
imshow(imfilter(t2,g2)); 
title('5*5高斯滤波器') 
subplot(2,2,4) 
imshow(imfilter(t2,g3)); 
title('7*7高斯滤波器')

figure(4) 
subplot(2,2,1) 
imshow(t2); 
title('原图') 
subplot(2,2,2) 
imshow(medfilt2(t2,[3,3])); 
title('3*3中值滤波器') 
subplot(2,2,3) 
imshow(medfilt2(t2,[5,5])); 
title('5*5中值滤波器') 
subplot(2,2,4) 
imshow(medfilt2(t2,[7,7])); 
title('7*7中值滤波器')

第二问

t1=imread('test1.pgm'); 
t2=imread('test2.tif');

g1=fspecial('gaussian',[3,3],1.5); 
g3=fspecial('gaussian',[15,15],1.5);

figure(1) 
subplot(2,2,1) 
imshow(t1); 
title('原图') 
subplot(2,2,2) 
imshow(imfilter(t1,g1)); 
title('3*3高斯滤波器') 
subplot(2,2,3) 
imshow(imfilter(t1,g3)); 
title('15*15高斯滤波器') 
subplot(2,2,4) 
imshow(imgaussfilt(t1,1.5)); 
title('内置高斯滤波器')

figure(3) 
subplot(2,2,1) 
imshow(t2); 
title('原图') 
subplot(2,2,2) 
imshow(imfilter(t2,g1)); 
title('3*3高斯滤波器') 
subplot(2,2,3) 
imshow(imfilter(t2,g3)); 
title('15*15高斯滤波器') 
subplot(2,2,4) 
imshow(imgaussfilt(t2,1.5)); 
title('内置高斯滤波器')

unsharp masking

IM=imread('C:\Users\Administrator\Desktop\第四次作业和PPT\test3_corrupt.pgm','pgm'); 
I=IM; 
IMSize=size(IM); 
IM=cast(IM,'int32'); 
t=zeros(IMSize(1)+2,IMSize(2)+2); 
t=cast(t,'int32'); 
t(2:IMSize(1)+1,2:IMSize(2)+1)=IM; 
t(:,1)=t(:,2); 
t(:,IMSize(2)+2)=t(:,IMSize(2)+1); 
t(1,:)=t(2,:); 
t(IMSize(1)+2,:)=t(IMSize(1)+1,:); 
A=1.0; 
for i=2:1:IMSize(1)+1 
for j=2:1:IMSize(2)+1 
IM(i-1,j-1)=t(i,j)A-(t(i,j)(-8)+t(i,j-1)+t(i-1,j-1)+t(i-1,j)+t(i,j+1)+t(i+1,j)+t(i+1,j+1)+t(i+1,j-1)+t(i-1,j+1)); 
end 
end 
IM=cast(IM,'uint8'); 
figure;subplot(1,2,1) 
imshow(I); 
title('原图像test3.pgm'); 
subplot(1,2,2) 
imshow(IM); 
title('非锐化掩膜后的test3.pgm');

Sobel edge detector

close all 
clc 
clear 
I=imread('C:\Users\Administrator\Desktop\第四次作业和PPT\test3_corrupt.pgm','pgm'); 
figure(1); 
subplot(1,2,1); 
imshow(I); 
title('原图像test3.pgm'); 
[N,M]=size(I); 
I=double(I); 
h1=[-1,0,1;-2,0,2;-1,0,1]; 
h2=[-1,-2,-1;0,0,0;1,2,1]; 
Gx=conv2(I,h1,'same'); 
Gy=conv2(I,h2,'same'); 
F=abs(Gx)+abs(Gy); 
for i=1:N 
for j=1:M 
I(i,j)=F(i,j); 
end 
end 
I=uint8(I); 
subplot(1,2,2); 
imshow(I); 
title('Sobel边缘检测test3.pgm');

Laplacian edge detector

close all 
clc 
clear 
I=imread('C:\Users\Administrator\Desktop\第四次作业和PPT\test3_corrupt.pgm','pgm'); 
[N,M]=size(I); 
figure; 
subplot(1,2,1); 
imshow(I); 
title('原图像test3.pgm'); 
t=ones(N,M); 
t=I; 
for i=2:N-1 
for j=2:M-1 
I(i,j)=t(i+1,j)+t(i-1,j)+t(i,j+1)+t(i,j-1)-4*t(i,j); 
end 
end 
subplot(1,2,2); 
imshow(I); 
title('Laplacian边缘检测test3.pgm');

Canny algorithm

clear all; 
close all; 
clc; 
img=imread('C:\Users\Administrator\Desktop\第四次作业和PPT\test3_corrupt.pgm','pgm'); 
imshow(img); 
[m n]=size(img); 
img=double(img); 
%%高斯滤波 
w=fspecial('gaussian',[5 5]); 
img=imfilter(img,w,'replicate'); 
figure; 
imshow(uint8(img)) 
%%sobel边缘检测 
w=fspecial('sobel'); 
img_w=imfilter(img,w,'replicate'); %求横边缘 
w=w'; 
img_h=imfilter(img,w,'replicate'); %求竖边缘 
img=sqrt(img_w.^2+img_h.^2); 
figure; 
imshow(uint8(img)) 
%%下面是非极大抑制 
new_edge=zeros(m,n); 
for i=2:m-1 
for j=2:n-1 
Mx=img_w(i,j); 
My=img_h(i,j);

if My~=0 
o=atan(Mx/My); %边缘的法线弧度 
elseif My==0 && Mx>0 
o=pi/2; 
else 
o=-pi/2; 
end

%Mx处用My和img进行插值 
adds=get_coords(o); %边缘像素法线一侧求得的两点坐标，插值需要 
M1=My*img(i+adds(2),j+adds(1))+(Mx-My)*img(i+adds(4),j+adds(3)); %插值后得到的像素，用此像素和当前像素比较 
adds=get_coords(o+pi);%边缘法线另一侧求得的两点坐标，插值需要 
M2=My*img(i+adds(2),j+adds(1))+(Mx-My)*img(i+adds(4),j+adds(3)); %另一侧插值得到的像素，同样和当前像素比较 
isbigger=(Mx*img(i,j)>M1)*(Mx*img(i,j)>=M2)+(Mx*img(i,j)

if isbigger 
new_edge(i,j)=img(i,j); 
end 
end 
end 
figure; 
imshow(uint8(new_edge))

%%下面是滞后阈值处理 
up=120; %上阈值 
low=100; %下阈值 
set(0,'RecursionLimit',10000); %设置最大递归深度 
for i=1:m 
for j=1:n 
if new_edge(i,j)>up &&new_edge(i,j)~=255 %判断上阈值 
new_edge(i,j)=255; 
new_edge=connect(new_edge,i,j,low); 
end 
end 
end 
figure; 
imshow(new_edge==255)

function re=get_coords(angle) %angle是边缘法线角度，返回法线前后两点 
sigma=0.000000001; 
x1=ceil(cos(angle+pi/8)*sqrt(2)-0.5-sigma); 
y1=ceil(-sin(angle-pi/8)*sqrt(2)-0.5-sigma); 
x2=ceil(cos(angle-pi/8)*sqrt(2)-0.5-sigma); 
y2=ceil(-sin(angle-pi/8)*sqrt(2)-0.5-sigma); 
re=[x1 y1 x2 y2]; 
end

function nedge=connect(nedge,y,x,low) %种子定位后的连通分析 
neighbour=[-1 -1;-1 0;-1 1;0 -1;0 1;1 -1;1 0;1 1]; %八连通搜寻 
[m n]=size(nedge); 
for k=1:8 
yy=y+neighbour(k,1); 
xx=x+neighbour(k,2); 
if yy>=1 &&yy<=m &&xx>=1 && xx<=n 
if nedge(yy,xx)>=low && nedge(yy,xx)~=255 %判断下阈值 
nedge(yy,xx)=255; 
nedge=connect(nedge,yy,xx,low); 
end 
end 
end 
end

+
